" Disable compatibility with vi which can cause unexpected issues.
set nocompatible

" Enable type file detection. Vim will be able to try to detect the type of file in use.
filetype on

" Enable plugins and load plugin for the detected file type.
filetype plugin on

" Load an indent file for the detected file type.
filetype indent on

" Turn syntax highlighting on.
syntax on

" Add numbers to each line on the left-hand side.
set number relativenumber

" Highlight cursor line underneath the cursor horizontally.
"set cursorline
" Removes the underline causes by enabling cursorline:
"highlight CursorLine term=none cterm=none
" Sets the line numbering to red background:
"highlight CursorLineNR ctermbg=red

" Highlight cursor line underneath the cursor vertically.
"set cursorcolumn

" Modify indenting settings
set autoindent " autoindent always ON.
set expandtab " expand tabs
set shiftwidth=4 " spaces for autoindenting
set softtabstop=4 " remove a full pseudo-TAB when i press <BS>

" Do not save backup files.
set nobackup
set nowritebackup
set noswapfile
set backspace=indent,eol,start

" Enable mouse in all modes
set mouse=a

" Do not let cursor scroll below or above N number of lines when scrolling.
set scrolloff=8

" Do not wrap lines. Allow long lines to extend as far as the line goes.
set nowrap
set linebreak

" While searching though a file incrementally highlight matching characters as you type.
set incsearch

" Ignore capital letters during search.
set ignorecase
set smartcase

" Show partial command you type in the last line of the screen.
set showcmd

" Show the mode you are on the last line.
set showmode

" Show matching words during a search.
set showmatch

" Use highlighting when doing a search.
set hlsearch

" Set the commands to save in history default number is 20.
set history=1000

" Enable auto completion menu after pressing TAB.
set wildmenu

" Make wildmenu behave like similar to Bash completion.
set wildmode=list:longest

" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


" PLUGINS ---------------------------------------------------------------- {{{

" Plugin code goes here.

" }}}
call plug#begin()
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/goyo.vim'
Plug 'ahayworth/ink-syntax-vim'
Plug 'ghifarit53/tokyonight-vim'
call plug#end()


" COLORS --------------------------------------------------------------- 
@REM set background=dark
@REM let g:solarized_termcolors=256
@REM let g:solarized_termtrans=1

set termguicolors

let g:tokyonight_style = 'night' " available: night, storm
let g:tokyonight_enable_italic = 1

colorscheme tokyonight


" MAPPINGS --------------------------------------------------------------- 

let mapleader=","

inoremap jj <esc>
" Press the space bar to type the : character in command mode.
nnoremap <space> :

nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <C-f> :Files<CR>
nnoremap <silent> <Leader>f :Rg<CR>
nnoremap <silent> <Leader>/ :BLines<CR>
nnoremap <silent> <Leader>' :Marks<CR>
nnoremap <silent> <Leader>g :Commits<CR>
nnoremap <silent> <Leader>H :Helptags<CR>
nnoremap <silent> <Leader>hh :History<CR>
nnoremap <silent> <Leader>h: :History:<CR>
nnoremap <silent> <Leader>h/ :History/<CR>
map <F6> :Goyo<CR>

noremap <expr> k (v:count == 0 ? 'gk' : 'k')
noremap <expr> j (v:count == 0 ? 'gj' : 'j')

" 


" VIMSCRIPT -------------------------------------------------------------- 

" This will enable code folding.
" Use the marker method of folding.
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

function! s:goyo_enter()
  if executable('tmux') && strlen($TMUX)
    silent !tmux set status off
    silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  endif
  set wrap
  set linebreak
  " Limelight
  " ...
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()

" 


" STATUS LINE ------------------------------------------------------------ 

function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  let b:gitstatus = strlen(l:branchname) > 0?''.l:branchname.'':''
endfunction

autocmd BufEnter,BufWritePost * call StatuslineGit()

set statusline=
set statusline+=\ %F\ %m\ %R
set statusline+=%(<%{b:gitstatus}>%)
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\ %n
set statusline+=\ 

" Show the status on the second to last line.
set laststatus=2
" 


